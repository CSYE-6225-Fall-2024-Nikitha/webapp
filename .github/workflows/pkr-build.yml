---
name: Packer Build Workflow
on:
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: ${{ env.PRODUCT_VERSION }}
      
      - name: Zip webapp
        run: |
          zip -r webapp.zip .
        working-directory: ../
        id: zip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}  
      
      - name: Run packer build
        run: |
          packer init packer-template.pkr.hcl
          packer build \
            -var "aws_region=${{ vars.AWS_REGION }}" \
            -var "base_ami_name=${{ vars.BASE_AMI_NAME }}" \
            -var "source_ami=${{ vars.SOURCE_AMI }}" \
            -var "ssh_username=${{ vars.SSH_USERNAME }}" \
            -var "vpc_id=${{ vars.VPC_ID }}" \
            -var "subnet_id=${{ vars.SUBNET_ID }}" \
            -var "ami_description=${{ vars.AMI_DESCRIPTION }}" \
            -var "ssh_timeout=${{ vars.SSH_TIMEOUT }}" \
            -var "instance_type=${{ vars.INSTANCE_TYPE }}" \
            -var "project_path=/home/runner/work/webapp/webapp.zip" \
            packer-template.pkr.hcl

  update_launch_template:
    needs: build
    runs-on: ubuntu-latest
    name: Update Launch Template & Trigger Instance Refresh

    steps:
      - name: Configure AWS Credentials for Dev
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Configure AWS Credentials for Demo
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Fetch Latest AMI ID from Packer Manifest
        id: fetch-ami-id
        run: |
          echo "Fetching the latest AMI ID from Packer Build Manifest"
          if [[ ! -f manifest.json ]]; then
            echo "manifest.json file not found"
            exit 1
          fi
          AMI_ID=$(jq -r '.builds[-1].artifact_id | split(":") | .[2]' manifest.json)
          echo "AMI ID: $AMI_ID"
          echo "ami=$AMI_ID" >> "$GITHUB_OUTPUT"

      - name: Update Launch Template with latest AMI ID
        run: |
          echo "Updating Launch Template with the new AMI ID"
          aws ec2 create-launch-template-version \
            --launch-template-data '{"ImageId":"${{ steps.fetch-ami-id.outputs.ami }}"}' \
            --source-version 1 \
            --launch-template-name ${{ vars.LAUNCH_TEMPLATE_NAME }} \
            --no-cli-pager

      - name: Instance Refresh for Auto Scaling Group
        run: |
          echo "Triggering instance refresh for Auto Scaling Group"
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ vars.AUTO_SCALING_GROUP_NAME }} \
            --strategy Rolling \
            --no-cli-pager
          echo "Instance refresh initiated"
      
      - name: Check Instance Refresh Status
        run: |
          REFRESH_STATUS="Pending"
          while [ "$REFRESH_STATUS" != "Successful" ] && [ "$REFRESH_STATUS" != "Failed" ] && [ "$REFRESH_STATUS" != "Cancelled" ]; do
            REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ vars.AUTO_SCALING_GROUP_NAME }} --query 'InstanceRefreshes[0].Status' --output text)
            echo "Instance Refresh Status: $REFRESH_STATUS"
            sleep 30
          done
          
          if [ "$REFRESH_STATUS" == "Successful" ]; then
            echo "Instance refresh completed successfully."
            exit 0
          elif [ "$REFRESH_STATUS" == "Failed" ]; then
            echo "Instance refresh failed."
            exit 1
          elif [ "$REFRESH_STATUS" == "Cancelled" ]; then
            echo "Instance refresh was cancelled."
            exit 1
          else
            echo "Unexpected exit status: $ASG_REFRESH_STATUS"
            exit 1
          fi